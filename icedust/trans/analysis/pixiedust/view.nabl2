module pixiedust/view

rules

  [[ Component(name, params, body) ^ (module_scope) ]] := 
    new body_scope,
    body_scope -P-> module_scope,
    Member{"children"} <- body_scope,
    Member{"children"} : TTuple(TView(), TZeroOrMore(), TOnDemand()),
    Member{"children"}.side := None(),
    Map1T [[params ^ (body_scope) : tpes]],
    Component{name} <- module_scope,
    Component{name} : TComponent(tpes),
    Component{name}.parameters := params,
    Component{name}.componentKind := NormalComponentKind(),
    Component{name}.body := body,
    Map1 [[ body ^ (body_scope) ]].
  
  [[ Render(exp) ^ (module_scope) ]] :=
    [[ exp ^ (module_scope) : _ ]].
  
  [[ RenderComponent(ref, parameters, children) ^ (module_scope) : ty ]] :=
    ty == TTuple(TView(), TOne(), TOnDemandIncremental()),
    [[ ref ^ (module_scope) : TComponent(params)]],
    PairwiseEqual [[ parameters ^ (module_scope, params) ]],
    Map1T [[ children ^ (module_scope) : (_) ]].
  
  [[ ComponentRef(name) ^ (module_scope) : ty ]] :=
    Component{name} -> module_scope,
    Component{name} |-> name_def,
    name_def : ty.
    
  [[ ComponentRefFromImport(importRef, name) ^ (module_scope) : ty ]] := 
    Import{importRef} -> module_scope,
    Import{importRef} |-> import_def,
    import_def ?===> import_scope_ref,
    new import_scope,
    import_scope ---> import_scope_ref,
    Component{name} -> import_scope,
    Component{name} |-> name_def,
    name_def : ty.
  
  PairwiseEqual [[ l@[x | xs] ^ (s, expected) ]] :=
    expected == [y | ys]  | error $[invalid number of arguments] @ l,
    [[ x ^ (s) : TTuple(x_ty, x_mult, x_strat) ]],
    y == TTuple(y_ty, y_mult, y_strat),
    x_ty <sub? y_ty | error $[expected type: [y_ty], got: [x_ty]],
    x_mult <mulOrd? y_mult | error $[expected multiplicity: [y_mult], got: [x_mult] ],
    x_strat <strat? y_strat | error $[expected strategy: [y_strat], got: [x_strat] ],
    PairwiseEqual [[ xs ^ (s, ys) ]].
    
  PairwiseEqual [[ l@[] ^ (s, expected) ]] := 
    expected == [] | error $[invalid number of arguments] @ l.
    
  [[ RenderDomElement(name, properties, children) ^ (module_scope) : ty ]] :=
    ty == TTuple(TView(), TOne(), TOnDemandIncremental()),
    Map1 [[ properties ^ (module_scope) ]],
    Map1T [[ children ^ (module_scope) : (_) ]].
  
  
  [[ DomElementProperty(k, value) ^ (s) ]] := 
    [[ value ^ (s) ]].
  
  [[ DomElementPropertyValueExp(e) ^ (s) ]] := 
    [[ e ^ (s) : _ ]].
  
  [[ DomElementPropertyValueMap(pairs) ^ (s) ]] :=
    Map1 [[ pairs ^ (s) ]].
  
  
  [[ RenderLoop(var, exp, body) ^ (module_scope) : ty ]] :=
    ty == TTuple(TView(), exp_mult, exp_strat),
    [[ exp ^ (module_scope) : TTuple(exp_type, exp_mult, exp_strat) ]],
    new body_scope,
    body_scope -P-> module_scope,
    Member{var} <- body_scope,
    Member{var} : TTuple(exp_type, TOne(), exp_strat),
    Member{var}.side := None(),
    Member{var}.variableType := NormalVariableType(),
    [[ body ^ (body_scope) : (_) ]].
    
  