module pixiedust/expressions

rules

  [[ Length(e) ^ (s) : TTuple(TInt(), e_mult, e_strat) ]] :=
    [[ e ^ (s) : TTuple(e_type, e_mult, e_strat) ]],
    e_type == TString() | error $[Expected type: String, got: $[e_type]],
    e_mult_u is multUpper of e_mult,
    e_mult_u == TUOne() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e_mult]] @ e.
    
  [[ Complement(e1, e2) ^ (s) : TTuple(out_type, out_mult, out_strat) ]] :=
    [[ e1 ^ (s) : TTuple(e1_type, e1_mult, e1_strat) ]],
    [[ e2 ^ (s) : TTuple(e2_type, e2_mult, e2_strat) ]],
    out_type is sub.lub of (e1_type,e2_type),
    out_mult is mergeMult of (e1_mult, e2_mult),
    out_strat is strat.lub of (e1_strat,e2_strat).