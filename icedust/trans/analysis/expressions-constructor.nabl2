module expressions-constructor

rules

  [[ NewInstance(type, fields) ^ (s) : e_ty ]] := 
    [[ type ^ (s) : entity_type ]],
    entity_type == TEntity(entity),
    entity ?=I=> entity_scope,
    
    e_ty == TTuple(entity_type, TOne(), TOnDemandIncremental()),
//    Member{var} <- s,
//    Member{var} : var_tpl,
//    Member{var}.side := None(),
    
    new instance_scope,
    instance_scope -P-> s,
    instance_scope -I-> entity_scope,
    
    Implicit{"this"} <- instance_scope,
    Implicit{"this"} : var_tpl,
    
    Map1 [[ fields ^ (instance_scope) ]].
    
  [[ InstanceValue(m, value) ^ (s) ]] :=
    Implicit{"this"} -> s,
    Implicit{"this"} |-> this_def,
    this_def : this_tpl,
    this_tpl == TTuple(this_type, this_m, this_strat),
    this_type == TEntity(this_type_entity), 
    this_type_entity ?=I=> entity_scope,
    new member_key_scope,
    member_key_scope -I-> entity_scope,
    Member{m} -> member_key_scope,
    Member{m} |-> member_def,
    member_def : m_tpl,
    m_tpl == TTuple(m_type, m_mult, m_strat),
    
    new member_value_scope,
    member_value_scope -P-> body,
    member_value_scope -X-> entity_scope,
    Implicit{"this"} <- member_value_scope,
    Implicit{"this"} : this_tpl,
    [[ value ^ (member_value_scope) : value_tpl ]],
    value_tpl == TTuple(value_type, value_mult, value_strat),
    value_type  <sub?    m_type  | error $[Type error: expected [m_type] got [value_type].]@value,
    value_mult  <mulOrd? m_mult  | error $[Multiplicity error: expected [m_mult] got [value_mult].]@value,
    expected_strat == TOnDemandIncremental(),
    value_strat <strat? expected_strat | error $[Calculation strategy error: expected [expected_strat] got [value_strat].]@value.