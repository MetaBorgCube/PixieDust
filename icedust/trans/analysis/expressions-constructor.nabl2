module expressions-constructor

rules

  [[ NewInstance(type, fields) ^ (s) : e_ty ]] := 
    [[ type ^ (s) : entity_type ]],
    entity_type == TEntity(entity),
    entity ?=I=> entity_scope,
    
    e_ty == TTuple(entity_type, TOne(), TOnDemandIncremental()),
//    Member{var} <- s,
//    Member{var} : var_tpl,
//    Member{var}.side := None(),
    
    new instance_scope,
    instance_scope -P-> s,
    instance_scope -I-> entity_scope,
    
    Implicit{"this"} <- instance_scope,
    Implicit{"this"} : e_ty,
    
    Map1 [[ fields ^ (instance_scope) ]].
    
  [[ InstanceValue(m, value) ^ (s) ]] :=
    
    Implicit{"this"} -> s,
    Implicit{"this"} |-> this_def,
    this_def : TTuple(this_type, this_mult, this_strat),
    this_type == TEntity(this_type_entity),
    this_type_entity ?=I=> entity_scope,
    
    new this_scope,
    this_scope -P-> s,
    this_scope -J-> entity_scope,
    
    Member{m} -> this_scope,
    Member{m} |-> m_def,
    m_def : m_tpl,
    m_tpl == TTuple(m_ty, m_mult, m_strat),
    
    [[ value ^ (this_scope) : value_tpl ]],
    value_tpl == TTuple(value_ty, value_mult, value_strat),
    
    value_ty  <sub?    m_ty  | error $[Type error: expected [m_type] got [value_type].]@value,
    value_mult  <mulOrd? m_mult  | error $[Multiplicity error: expected [m_mult] got [value_mult].]@value.