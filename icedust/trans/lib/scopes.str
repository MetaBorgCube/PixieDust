module scopes

imports
  libstratego-lib

signature
  sorts
    Env
    Scope
    Binding

  constructors
    Env : list(Scope) * Int -> Env
    Scope : list(Binding) -> Scope
    Binding: String * Int -> Binding
    
rules
  /**
    new-environment :: Env
    
  */
  
  new-environment = !Env([<new-scope>], 0)
  
  /**
    environment-get-offset :: Env -> Int
  */
  environment-get-offset = ?Env(_, <id>)
  
  /**
    new-scope :: Scope
  */
  new-scope = !Scope([])
  
  
  /**
    push-scope :: Env -> Env
  */
  push-scope : Env(scopes, offset) -> Env([scope | scopes], offset)
    with
      scope := <new-scope>
  
  /**
    pop-scope :: Env -> Env
  */
  pop-scope = Env(Tl, id)
  
  /**
    fresh-variable :: Env -> (Env, String)
  */
  fresh-variable = !(<Env(id, inc)>, <environment-get-offset ; offset-to-variable>)
  
  offset-to-variable = !$[_[<id>]]
  
  /**
    store-variable :: (Env, String) -> (Env, String)
  */
  store-variable : (env, var) -> (env', <offset-to-variable> offset)
    with
      Env([Scope(bindings) |ss], offset) := env
    ; binding := Binding(var, offset)
    ; env' := Env([Scope([binding | bindings]) | ss], <inc> offset)
  store-variable(|var) = <store-variable> (<id>, var)
  
  
  /**
    get-variable :: (Env,String) -> String
  */
  get-variable = ?(<id>, var) ; ?Env(<fetch-elem(get-variable-from-scope(|var))>, _) ; offset-to-variable
    
  //get-variable-from-scope :: Scope -> Int
  get-variable-from-scope(|var) = ?Scope(<fetch-elem(?Binding(var, <id>))>)
  
  
  /**
    s_i: Env -> (Env, Term)
    thread-env :: Env -> (Env, (Term_i))
  */
  thread-environment(s1) = s1 ; (id, ![<id>])
  thread-environment(s1, s2) = s1 ; ?(<thread-environment(s2)>, t) ; (id, ![t | <id>])
  thread-environment(s1, s2, s3) = s1 ; ?(<thread-environment(s2, s3)>, t) ; (id, ![t | <id>])
  thread-environment(s1, s2, s3, s4) = s1 ; ?(<thread-environment(s2, s3, s4)>, t) ; (id, ![t | <id>])
  thread-environment(s1, s2, s3, s4, s5) = s1 ; ?(<thread-environment(s2, s3, s4, s5)>, t) ; (id, ![t | <id>])
  thread-environment(s1, s2, s3, s4, s5, s6) = s1 ; ?(<thread-environment(s2, s3, s4, s5, s6)>, t) ; (id, ![t | <id>])
  thread-environment(s1, s2, s3, s4, s5, s6, s7) = s1 ; ?(<thread-environment(s2, s3, s4, s5, s6, s7)>, t) ; (id, ![t | <id>])
  thread-environment(s1, s2, s3, s4, s5, s6, s7, s8) = s1 ; ?(<thread-environment(s2, s3, s4, s5, s6, s7, s8)>, t) ; (id, ![t | <id>])
  
  
  /**
    do-fold :: ((env, [value]), value) -> (env, [value])
  */
  env-fold(do-fold) = env-fold(do-fold |[])
  env-fold(do-fold | initial) : (env, values) -> <foldl(flip(do-fold))> (values, (env, initial))
  
  