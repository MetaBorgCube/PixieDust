module generating/js/getter

imports
  signatures/Types-sig
  
  api/types-api
  api/types-names-api
  api/model-names-api
  
  generating/js/names
  generating/js/common
  generating/js/expression

rules
  
  generate-getter-functions = !(<getter-one-function>, <getter-many-function>) ; conc
  
  getter-one-function: x_attributeName -> <getter-function> (x_attributeName, One())
  getter-many-function: x_attributeName -> <getter-function> (x_attributeName, ZeroOrMore())
  
  getter-function : (x_attributeName, m) -> result
    with
      x_functionName := <getter-function-name> (x_attributeName, m)
    ; stmts_getter := <getter-statements> (x_attributeName, m)
    ; x_id := <upper-one < !"id" + !"ids"> m
    ; result := js-stmt* |[
        function x_functionName(state, x_id) {
          stmts_getter
        }
        module.exports.x_functionName = x_functionName;
      ]|
  
  getter-statements : (x_attributeName, m) -> result
    with
      switch !m
        case upper-one : result := <getter-one-statements> x_attributeName
        case upper-many: result := <getter-many-statements> x_attributeName
      end
    
  getter-statements : (x_attributeName, One()) -> <getter-one-statements> x_attributeName
  
  getter-one-statements : x_attributeName -> stmts
    with
      (x_result, i) := <int-to-varname-inc> 0
    ; exp_attributeTable := <attribute-table-expression> x_attributeName
    ; exp_entityTable := <entity-table-expression> x_attributeName
    ; m_attributeName := <name-get-multiplicity> x_attributeName
    ; exp_empty := <exp-empty> m_attributeName
    with
      switch !x_attributeName
        case attributename-is-derivation:
          stmts := js-stmt* |[
            return state.get(exp_attributeTable).get(id);
          ]|
        case is-relationname:
          stmts := js-stmt* |[
            var x_result = state.get(exp_attributeTable).get(id);
            if(x_result === undefined) {
              x_result = exp_empty;
            }
            return x_result;
          ]|
        case attributename-is-normal:
          stmts := js-stmt* |[
            var x_result = state.get(exp_entityTable).get(id);
            if(x_result !== undefined) {
              x_result = x_result.x_attributeName;
              if(x_result === undefined) {
                x_result = exp_empty;
              }
            }
            return x_result;
          ]|
        case attributename-is-default:
          stmts := js-stmt* |[
            var x_result = state.get(exp_entityTable).get(id);
            if(x_result !== undefined) {
              x_result = x_result.x_attributeName;
              if(x_result === undefined || x_result === null) {
                x_result = state.get(exp_attributeTable).get(id);
              }
            }
            return x_result;
          ]|
      end
      
  getter-many-statements: x_attributeName -> stmts
    with
     (i, (
      x_result, 
      x_entityTable,
      x_attributeTable, 
      x_loop, 
      x_value
    )) := <gen-varnames-inc> (0, 5)
    ; exp_attributeTable := <attribute-table-expression> x_attributeName
    ; exp_entityTable := <entity-table-expression> x_attributeName
    with 
      switch <name-get-multiplicity> x_attributeName
        case upper-one:
          stmts_push := js-stmt* |[
            if(x_value !== undefined) {
              x_result.push(x_value);
            }
          ]|
        case upper-many: 
            (x_value2, x_loop2) := <gen-varnames> (i, 2)
          ; stmts_push := js-stmt* |[
            for(var x_loop2 = 0 ; x_loop2 < x_value.length ; x_loop2++) {
              var x_value2 = x_value[x_loop2];
              if(x_value2 !== null) {
                x_result.push(x_value2);
              }
            }
          ]|
      end
    with
      switch !x_attributeName
        case attributename-is-derivation:
          stmts := js-stmt* |[
            var x_result = [];
            var x_attributeTable = state.get(exp_attributeTable);
            for(var x_loop = 0 ; x_loop < ids.length ; x_loop++) {
              x_value = x_attributeTable.get(ids[x_loop]);
              stmts_push
            }
            return x_result;
          ]|
        case is-relationname:
          stmts := js-stmt* |[
            var x_result = [];
            var x_attributeTable = state.get(exp_attributeTable);
            for(var x_loop = 0 ; x_loop < ids.length ; x_loop++) {
              x_value = x_attributeTable.get(ids[x_loop]);
              if(x_value !== undefined) {
                stmts_push
              }
            }
            return x_result;
          ]|  
        case attributename-is-normal:
          stmts := js-stmt* |[
            var x_result = [];
            var x_entityTable = state.get(exp_entityTable);
            for(var x_loop = 0 ; x_loop < ids.length ; x_loop++) {
              x_value = x_entityTable.get(ids[x_loop]);
              if(x_value !== undefined) {
                x_value = x_value.x_attributeName;
                if(x_value !== undefined && x_value !== null) {
                  stmts_push
                }
              }
            }
            return x_result;
          ]|
        case attributename-is-default:
          stmts := js-stmt* |[
            var x_result = [];
            var x_entityTable = state.get(exp_entityTable);
            var x_attributeTable = state.get(exp_attributeTable);
            for(var x_loop = 0 ; x_loop < ids.length ; x_loop++) {
              x_value = x_entityTable.get(ids[x_loop]);
              if(x_value !== undefined) {
                x_value = x_value.x_attributeName;
                if(x_value === undefined) { //no uservalue
                  x_value = x_attributeTable.get(ids[x_loop]);
                }
                stmts_push
              }
            }
            return x_result;
          ]|
      end
  