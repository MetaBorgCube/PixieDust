module generating/pixiedust/action

imports
  api/component-api
  api/action-api
  api/types-names-api
  api/types-api
  
  js/js-util
  
  signatures/Types-sig
  signatures/pixiedust/Action-sig
  
  generating/js/expression
  generating/js/names
  
rules
  generate-component-actions = 
    modulename-get-componentnames
  ; mapconcat(!(<id>, <componentname-get-actions>) ; generate-action-functions)
      
  
  generate-action-functions: (componentName, actions) -> result 
    with
      result := <mapconcat(!(componentName, <id>) ; generate-action-function)> actions
  
      
  generate-action-function: (componentName, action) -> result
    with
      actionName := <actiondeclaration-get-name> action
    ; stmts_statements := <actiondeclaration-get-statements ; generate-action-statements> action
    ; x_functionName := <actionname-get-functionname> (componentName, actionName)
    ; prop_parameters* := <actiondeclaration-get-args ; map(type-parameter-get-name) ; map-with-index(argument-to-prop)> action
    ; exp_functionName := <js-string> x_functionName
    ; result := js-stmt* |[
      function x_functionName(state, action){
        var newState = state;
        scoped(scope, _.assign({}, _.assign({}, action.props, {prop_parameters*})), function(scope) {
          stmts_statements
        });
        return newState;
      }
      actions[exp_functionName] = x_functionName;
    ]|
    
  argument-to-prop: (i, x_name) ->
    js-prop |[
      x_name: action.args[exp_index]
    ]|
      with
        exp_index := <dec ; int-to-string ; js-int> i
    
  generate-action-statements: statements -> <concat> stmts_stmts_statements 
    with
      (stmts_stmts_statements, i) := <foldl(fold-action-statement)> (statements, ([], 0))
    
  fold-action-statement: (statement, (stmts_stmts_statement, i)) -> result
    with
      (stmts_statement, i') := <generate-action-statement(|i)> statement
    ; result := ([stmts_statement | stmts_stmts_statement], i')
    
  generate-action-statement(|i): UpdateEntityStatement(stmt) -> <generate-entity-field(|i)> stmt 
  generate-action-statement(|i): CreateEntityStatement(stmt) -> <generate-entity-field(|i)> stmt 
      
  
  generate-entity-field(|i): EntityMember(name, e) -> result
    with
      exp_this := <exp-this>
    ; (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; (x_result, i'') := <int-to-varname-inc> i'
    ; x_setterFunction := <setter-function-name> name
    ; stmts := js-stmt* |[
      stmts_e
      newState = x_setterFunction(newState, exp_this, exp_e);
    ]|
    ; result := (stmts, i'')
  
  generate-entity-field(|i): UpdateEntity(e, fields) -> result
    with
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; switch <get-multiplicity> e
      case upper-one:
        (x_var, i'') := <int-to-varname-inc> i'
        ; (stmts_fields, i_result) := <generate-entity-fields(|i'')> fields
        ; stmt_scoped := <scope-this-lexically> (exp_e, stmts_fields)        
        ; stmts := js-stmt* |[
          stmts_e
          stmt_scoped
        ]|
      case upper-many:
        (x_loop, i'') := <int-to-varname-inc> i'
        ; (x_var, i''') := <int-to-varname-inc> i''
        ; (stmts_fields, i_result) := <generate-entity-fields(|i''')> fields
        ; exp_this := js-exp |[exp_e[x_loop]]|
        ; stmt_scoped := <scope-this-lexically> (exp_this, stmts_fields)
        ; stmts := js-stmt* |[
          stmts_e
          for(var x_loop = 0 ; x_loop < exp_e.length ; x_loop++) {
            stmt_scoped
          }
        ]|
    end
    ; result := (stmts, i_result)
  
  generate-entity-field(|i) : CreateEntityInstance(x_var, EntityType(tpe), fields) -> result
    with
      (x_instance, i') := <int-to-varname-inc> i
    ; exp_instance := js-exp |[x_instance.id]|
    ; (stmts_fields, i_result) := <generate-entity-fields(|i')> fields
    ; stmt_scoped := <scope-this-lexically> (exp_instance, stmts_fields)
    ; exp_table := <attribute-table-expression> tpe
    ; stmts := js-stmt* |[
        var x_instance = {
          id: pixiedustRuntime.generateUniqueId()
        };
        newState = newState.update(exp_table, function(table) {
          return table.set(x_instance.id, x_instance);
        });
        stmt_scoped
      ]|
    ; result := (stmts, i_result)
  
  generate-entity-fields(|i) : fields -> result
    with
      (stmts_fields, i') := <foldl(fold-entity-field)> (fields, ([], i))
    ; result := (<concat> stmts_fields, i')
    
  fold-entity-field : (field, (stmts_stmts_field, i)) -> result
    with
      (stmts_field, i') := <generate-entity-field(|i)> field
    ; result := ([stmts_field | stmts_stmts_field], i')
    
  
       