module generating/pixiedust/component

imports
  signatures/pixiedust/View-sig
  signatures/pixiedust/Types-sig
  
  generating/pixiedust/expression
  generating/pixiedust/names

  api/component-api
  api/types-names-api
  
  js/js-util

rules

  generate-components: moduleName -> stmts
    with
      x_componentScope := <component-scope-var>
    ; components := <modulename-get-componentnames ; filter(componentname-is-normal-kind)> moduleName
    ; exp_component* := <map(componentname-to-js-exp)> components
    ; prop_component* := <zip ; map(component-to-prop)> (components, exp_component*)
    ; stmts := js-stmt* |[
        var x_componentScope = (function(){
          var oldScope = scope;  
          return {
            prop_component*
          };
        })();
        module.exports.x_componentScope = x_componentScope;
      ]|
      
  componentname-to-js-exp : componentname -> result
    where
      <componentname-is-normal-kind> componentname
    with
      body := <componentname-get-body> componentname
    ; renderExpressions := <componentbody-get-render-expressions> body 
    ; (exp_body*, stmts_stmts_body, i') := <exp-fold(|0)> renderExpressions
    ; stmts_body := <concat> stmts_stmts_body
    ; exp_wrapped := <component-wrap-elements> (exp_body*, renderExpressions)
    ; result := js-exp |[
        Runtime.PixieDust.Component.Lifted(
          function(props, state){
            var scope = Runtime._.assign({}, oldScope, props);
            stmts_body
            return {
              result: exp_wrapped,
              state: state
            };
          }
        )
    ]|
    
  component-wrap-elements: ([], []) -> <js-null>
  component-wrap-elements: ([exp_element|[]], [e_element|[]]) -> exp_element
    where
      View() := <get-type2> e_element
  component-wrap-elements: (exp_element*, _) -> js-exp |[
    Runtime.React.createElement('group', {}, exp_element*)
  ]|
  
  component-to-prop: (x_componentname, exp_component) -> js-prop |[
    x_componentname: exp_component
  ]|