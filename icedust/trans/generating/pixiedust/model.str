module generating/pixiedust/model

imports
  api/model-names-api
  
  generating/pixiedust/names
  generating/pixiedust/expression
  
  lib/scopes
  lib/lists-tuples

rules
  entityname-to-js-stmts: (env, x_entityname) -> <!(env', <id>)> js-stmt* |[
    class x_entityname {
      constructor(){
        stmts_init
      }
      methods_attributes
    }
  ]|
    with
      attributenames := <entityname-get-arrinames-defined> x_entityname
    ; (env', [
        stmts_init,
        methods_attributes
      ]) := <thread-environment(
        env-thread-param(env-fold-mapconcat(init-attribute)|attributenames),
        env-thread-param(env-fold-mapconcat(attributename-to-js-methods)|attributenames)
      )> env
      
  
rules // Dirty flagging

  flag-dirty-method : (env, x_attributename) -> (env', method)
    with
      x_methodName := <flag-dirty-name> x_attributename
    ; x_dirtySubscribers := <dirty-subscribers-name> x_attributename
    ; exp_callDirtySubscriber := <exp-call-dirty-subscriber>
    ; (env', [
      stmts_clearCache,
      stmts_flowsto
    ]) := <thread-environment(
      env-thread-param(flag-dirty-clear-cached-value|x_attributename),
      env-thread-param(env-fold-mapconcat(dataflow-path-to-dirty-flag-stmts)|<name-get-flowsto-paths> x_attributename)
    )> env
    ; method := js-method |[
        x_methodName(){
          stmts_clearCache
          if(this.x_dirtySubscribers !== undefined) {
            this.x_dirtySubscribers.forEach(exp_callDirtySubscriber);
          }
          stmts_flowsto
        }
      ]|
      
  
  flag-dirty-clear-cached-value: (env, x_attributename) -> (env, stmts_clear)
    where
      <name-is-default-derived> x_attributename
    ; x_cache := <cache-value> x_attributename
    ; stmts_clear := js-stmts |[
      this.x_cache = undefined;
    ]|
  
  flag-dirty-clear-cached-value = (id, ![])
  
    
  dataflow-path-to-dirty-flag-stmts : (env, DataflowPath(origin, pathexpr)) -> (env', stmts)
    with
      x_attributeName           := <pathexpr-last>pathexpr
    ; x_flagDirty               := <flag-dirty-name>x_attributeName
    ; e                         := <pathexpr-shorten-safe> pathexpr
    ; (env', (exp_e, stmts_e))  := <exp-to-js-stmts> (env, e)
    ; stmts := js-stmts |[
      stmts_e
      exp_e.x_flagDirty();
    ]|
  
rules // Normal attribute
  
  attributename-to-js-methods : (env, x_attributename) -> 
    <thread-environment(
        env-thread-param(normal-getter-method|x_attributename),
        env-thread-param(flag-dirty-method| x_attributename)
    )> env
    where
      <attributename-is-normal> x_attributename
  
  
  attributename-to-js-methods : (env, x_attributename) ->
    <thread-environment(
//        env-thread-param(normal-getter-method|x_attributename),
        env-thread-param(flag-dirty-method| x_attributename),
        env-thread-param(derived-getter-method| x_attributename)
    )> env
    where
      <attributename-is-derivation> x_attributename
  
  attributename-to-js-methods : (env, x_attributename) ->
    <thread-environment(
//        env-thread-param(normal-getter-method|x_attributename),
        env-thread-param(flag-dirty-method| x_attributename)
    )> env
    where
      <attributename-is-default> x_attributename
  
rules // Getter  
  normal-getter-method: (env, x_attributename) -> <!(env, <id>)> js-method |[
    x_methodName(){
      return this.x_attributename;
    }
  ]|
    with
      x_methodName := <getter-name> x_attributename
    
  derived-getter-method: (env, x_attributename) -> result
    where
      <is-relationname; relationname-is-right> x_attributename
    with
      x_methodName := <getter-name> x_attributename
    ; x_cacheValue := <cache-value> x_attributename
    ; method := js-method |[
      x_methodName() {
        return this.x_cacheValue;
      }
    ]|
    ; result := (env, method)
    
      
  derived-getter-method: (env, x_attributename) -> result
    with
      e_derived := <attributename-get-expr> x_attributename
    ; x_methodName := <getter-name> x_attributename
    ; x_cacheValue := <cache-value> x_attributename
    ; (env', [
      (exp_derived, stmts_derived)
    ]) := <thread-environment(
      exp-to-js-stmts(|e_derived)
    )> env
    ; method := js-method |[
      x_methodName(){
        if(this.x_cacheValue === undefined) {
          stmts_derived
          this.x_cacheValue = exp_derived;
        }
        return this.x_cacheValue;
      }
    ]|
    ; result := (env', method)
  
  default-getter-method: (env, x_attributename) -> result
    with
      e_default := <attributename-get-expr> x_attributename
    ; x_methodName := <getter-name> x_attributename
    ; x_cacheValue := <cache-value> x_attributename
    ; x_userValue := <user-value> x_attributename
    ; (env', (exp_default, stmts_default)) := <exp-to-js-stmts> (env, e_default)
    ; method := js-method |[
      x_methodName(){
        if(this.x_userValue !== null) {
          return this.x_userValue;
        } else {
          if(this.x_cacheValue === undefined) {
            stmts_default
            this.x_cacheValue = exp_default;      
          }
          return this.x_cacheValue;
        }
      }
    ]|
    ; result := (env', method)
    
rules // Constructor

  init-attribute = where((id, attributename-is-default)) ; init-default-attribute
  init-attribute = where((id, attributename-is-derivation)) ; init-derived-attribute
  init-attribute = where((id, attributename-is-normal)) ; init-normal-attribute

  init-normal-attribute = (id, ![<assign-empty-user-value>])
  init-derived-attribute = (id, ![<assign-empty-cache-value>])
  init-default-attribute = (id, ![<assign-empty-user-value>, <assign-empty-cache-value>])
      
  assign-empty-user-value = !(<user-value>, <exp-empty-attribute>) ; ?(x_userValue, exp_empty) ; !js-stmt |[this.x_userValue = exp_empty;]|
  assign-empty-cache-value = cache-value ; ?x_cacheValue ; !js-stmt |[this.x_cacheValue = undefined;]|
      
rules // TODO  
  
  attributename-to-js-methods : (env, x_attributename) -> <!(env, <id>)> js-method* |[
    x_attributename(){
      todo();
    }
  ]|
  

      
  
  
  
  
  
  