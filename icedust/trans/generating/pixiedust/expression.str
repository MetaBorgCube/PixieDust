module generating/pixiedust/expression

imports
  generating/js/expression
  generating/js/names
  
  generating/pixiedust/names
  
  signatures/pixiedust/Types-sig
  signatures/pixiedust/View-sig
  signatures/pixiedust/Expressions-sig
  
  js/js-util
  
  
  api/types-api
  api/types-names-api
  api/component-api
  api/action-api
  
rules
  exp-to-js-stmts(|i) = ?Length(e) ; unexp-to-js-stmts(!e, js-length|i)
  js-length: exp_e -> js-exp |[exp_e !== null ? exp_e.length : null]|
  
  //cast
  
  do-cast: (exp_e, View(), String()) -> js-exp |[pixiedustRuntime.castViewToString(store, exp_e)]|
  
  //render
  
  exp-to-js-stmts(|i) : RenderDomElement(name, attributes, children) -> result
    with
      exp_name := <js-string> name
    ; (x_result, i') := <int-to-varname-inc> i
    ; (x_attributes, i'') := <int-to-varname-inc> i'
    ; (prop_attributes*, stmts_stmts_attributes, i''') := <attribute-fold(|i'', x_attributes)> attributes
    ; stmts_attributes := <concat> stmts_stmts_attributes
    ; (exp_children*, stmts_stmts_children, i'''') := <exp-fold(|i''')> children
    ; stmts_children := <concat> stmts_stmts_children
    ; stmts := js-stmt* |[
        stmts_attributes
        stmts_children
        var x_result = React.createElement(exp_name, {prop_attributes*}, exp_children*);
      ]|
    ; result := (<js-var> x_result, stmts, i'''')
  
  attribute-to-js-prop-stmts(|i): DomElementProperty(x_key, DomElementPropertyValueMap(pairs)) -> result
    with
      (x_map, i') := <int-to-varname-inc> i
    ; (prop_pairs*, stmts_stmts_pairs, i'') := <attribute-fold(|i', x_map)> pairs
    ; stmts_pairs := <concat> stmts_stmts_pairs
    ; prop := js-prop |[
      x_key: {
        prop_pairs*
      }
    ]| 
    ; stmts := js-stmt* |[
        stmts_pairs
      ]|
    ; result := (prop, stmts, i'')
  
  attribute-to-js-prop-stmts(|i): DomElementProperty(x_key, DomElementPropertyValueExp(e)) -> result
    with
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; exp_key := <js-var> x_key
    ; prop_e := js-prop |[x_key : exp_e]| 
    ; result := (prop_e, stmts_e, i')
  
  attribute-to-js-prop-stmts(|i): DomElementProperty(x_key,  ActionCall(x_actionName, args)) -> result
    with
      (exp_arg*, stmts_stmts_args, i') := <exp-fold(|i)> args
    ; exp_action := <js-string> x_actionName
    ; prop := js-prop |[
        x_key: scope[exp_action](exp_arg*)
      ]|
    ; result := (prop, <concat> stmts_stmts_args, i)
    
  attribute-fold(|i, x_obj) = ctx-fold(do-attribute-fold(|x_obj)|i)
  
  do-attribute-fold(|x_obj) : (attribute, (props, stmts, i)) -> result
    where
      (prop_attribute, stmts_attribute, i') := <attribute-to-js-prop-stmts(|i)> attribute
    ; result := ([prop_attribute | props], [stmts_attribute | stmts], i')
    
  
  ctx-fold(do-fold|i) = !(<id>, ([], [], i)) ; foldl(do-fold) ; (reverse, reverse, id) 
  
  exp-fold(|i) = ctx-fold(do-exp-fold|i) 
  do-exp-fold : (e, (exps, stmts, i)) -> result
    where
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; result := ([exp_e | exps], [stmts_e | stmts], i')
  
  exp-to-js-stmts(|i) : RenderComponent(ref, parameters, children) -> result
    with
      exp_componentRef := <component-ref> ref
    ; (x_result, i') := <int-to-varname-inc> i
    ; (exp_parameter*, stmts_stmts_parameter, i'') := <exp-fold(|i')> parameters
    ; (exp_children*, stmts_stmts_children, i''') := <exp-fold(|i'')> children
    ; exp_props := <component-parameters-to-props> (ref, parameters, exp_parameter*)
    ; stmts_parameter := <concat> stmts_stmts_parameter
    ; stmts_children := <concat> stmts_stmts_children
    ; stmts := js-stmt* |[
      stmts_parameter
      stmts_children
      var x_result = React.createElement(exp_componentRef, exp_props, exp_children*);
    ]|
    ; result := (<js-var> x_result, stmts, i''')
  
  
  component-ref : ComponentRef(x_name) -> js-exp |[x_componentScope.x_name]|
    where
      <componentname-is-normal-kind> x_name
    with
      x_componentScope := <component-scope-var>
  
  component-ref : ComponentRef(x_name) -> js-exp |[imports[exp_importAlias].x_name]|
    where
      <componentname-is-native-kind> x_name
    with
      (_, x_importAlias) := <componentname-get-imported-from> x_name 
    ; exp_importAlias := <js-string> x_importAlias
      
  component-ref : ComponentRefFromImport(x_import, x_name) -> <component-ref> ComponentRef(x_name)
  
  component-parameters-to-props: (ref, parameters, exp_parameter*) -> exp_result
    with
      parameterNames := <componentref-get-componentname ; componentname-get-parameter-names> ref
    ; prop_params* := <zip3 ; mapconcat(component-parameter-to-props)> (parameterNames, parameters, exp_parameter*)
    ; exp_result := js-exp |[ 
        {
          prop_params*
        }
      ]|
    
    
  component-parameter-to-props: (x_name, e_parameter, exp_parameter) -> result
    where 
      <componentparameter-is-boxed> x_name
    ; MemberAccess(e_inner, name) := e_parameter
    with
      x_identity := $[[x_name]$identity]
    ; (exp_identity, stmts_identity, _) := <exp-to-js-stmts(|0)> e_inner
    ; x_setter := $[[x_name]$setter]
    ; exp_setter := <setter-function-name ; js-string> name
    ; result := js-prop* |[
        x_identity: (function(){
          stmts_identity
          return exp_identity;
        })(),
        x_setter: actionCreators[exp_setter],
        x_name : exp_parameter
      ]|
  
  component-parameter-to-props: (x_name, _, exp_parameter) -> js-prop* |[x_name: exp_parameter]| 
  
  
  
  exp-to-js-stmts(|i) : RenderLoop(x_var, e, e_body) -> result 
    with
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; (exp_body, stmts_body, i'') := <exp-to-js-stmts(|i')> e_body
    ; (x_result, i''') := <int-to-varname-inc> i''
    with
      switch <get-multiplicity> e
        case upper-one:
          stmts_scoped := js-stmt* |[
            var oldScope = scope;
            var x_result;
            if(exp_e !== null){
              (function(){
                var scope = _.assign({}, oldScope, {
                  x_var : exp_e 
                });
                stmts_body
                x_result = exp_body;
              })();
            } else {
              x_result = null;
            }
          ]|
        ; i_result := i'''
        case upper-many:
          (x_loop, i'''') := <int-to-varname-inc> i'''
        ; exp_result := <render-loop-identity> (e_body, exp_body, x_var)
        ; stmts_scoped := js-stmt* |[
            var oldScope = scope;
            var x_result = [];
            for(var x_loop = 0 ; x_loop < exp_e.length ; x_loop++){
              (function(){
                var scope = _.assign({}, oldScope, {
                  x_var : exp_e[x_loop]
                });
                stmts_body
                x_result.push(exp_result);
              })();
            } 
          ]|
        ; i_result := i''''
      end
    with
      stmts := js-stmt* |[
        stmts_e
        stmts_scoped
      ]|
    ; result := (<js-var> x_result, stmts, i_result)
    
    
  render-loop-identity: (e_body, exp_body, x_var) -> result
    with
      switch <get-type2> e_body
        case ?View():
          result := js-exp |[
            _.assign({}, exp_body, {
              key: scope.x_var
            })
          ]|
        otherwise:
          result := exp_body  
      end
    
  exp-to-js-stmts(|i) = ?Complement(e1, e2) ; binexp-to-js-stmts(!(e1,e2), \(exp_lhs, exp_rhs) -> <merge-complement> (e1, e2, exp_lhs, exp_rhs)\|i)
  
  
  merge-complement: (e1, e2, exp_lhs, exp_rhs) -> exp_result
    with
      switch <(get-multiplicity, get-multiplicity)> (e1, e2)
        case (upper-one, upper-one):
          exp_result := js-exp |[exp_lhs == exp_rhs ? null : exp_lhs]|
        case (upper-one, upper-many):
          exp_result := js-exp |[_.includes(exp_rhs, exp_lhs) ? null : exp_lhs]|
        case (upper-many, upper-one):
          exp_result := js-exp |[exp_rhs == null ? exp_lhs : _.without(exp_lhs, exp_rhs)]|
        case (upper-many, upper-many):
          exp_result := js-exp |[_.difference(exp_lhs, exp_rhs)]|
      end
  
  