module generating/pixiedust/expression

imports
  generating/js/expression
  
  signatures/pixiedust/View-sig
  
  signatures/pixiedust/Expressions-sig
  
  js/js-util
  
  api/types-api
  api/types-names-api
  
rules
  exp-to-js-stmts(|i) = ?Length(e) ; unexp-to-js-stmts(!e, js-length|i)
  js-length: exp_e -> js-exp |[exp_e !== null ? exp_e.length : null]|
  
  //cast
  
  do-cast: (exp_e, View(), String()) -> js-exp |[Runtime.ReactDOM.renderToStaticMarkup(exp_e)]|
  
  //render
  
  exp-to-js-stmts(|i) : RenderDomElement(name, attributes, children) -> result
    with
      exp_name := <js-string> name
    ; (x_result, i') := <int-to-varname-inc> i
    ; (x_attributes, i'') := <int-to-varname-inc> i'
    ; (prop_attributes*, stmts_stmts_attributes, i''') := <attribute-fold(|i'', x_attributes)> attributes
    ; stmts_attributes := <concat> stmts_stmts_attributes
    ; (exp_children*, stmts_stmts_children, i'''') := <exp-fold(|i''')> children
    ; stmts_children := <concat> stmts_stmts_children
    ; stmts := js-stmt* |[
        stmts_attributes
        stmts_children
        var x_result = Runtime.React.createElement(exp_name, {prop_attributes*}, exp_children*);
      ]|
    ; result := (<js-var> x_result, stmts, i'''')
  
  attribute-to-js-prop-stmts(|i): DomElementProperty(x_key, Map(pairs)) -> result
    with
      (x_map, i') := <int-to-varname-inc> i
    ; (prop_pairs*, stmts_stmts_pairs, i'') := <attribute-fold(|i', x_map)> pairs
    ; stmts_pairs := <concat> stmts_stmts_pairs
    ; prop := js-prop |[
      x_key: {
        prop_pairs*
      }
    ]| 
    ; stmts := js-stmt* |[
        stmts_pairs
      ]|
    ; result := (prop, stmts, i'')
  
  attribute-to-js-prop-stmts(|i): DomElementProperty(x_key, e) -> result
    with
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; exp_key := <js-var> x_key
    ; prop_e := js-prop |[x_key : exp_e]| 
    ; result := (prop_e, stmts_e, i')
    
  attribute-fold(|i, x_obj) = ctx-fold(do-attribute-fold(|x_obj)|i)
  
  do-attribute-fold(|x_obj) : (attribute, (props, stmts, i)) -> result
    where
      (prop_attribute, stmts_attribute, i') := <attribute-to-js-prop-stmts(|i)> attribute
    ; result := ([prop_attribute | props], [stmts_attribute | stmts], i')
    
  
  ctx-fold(do-fold|i) = !(<id>, ([], [], i)) ; foldl(do-fold) ; (reverse, reverse, id) 
  
  exp-fold(|i) = ctx-fold(do-exp-fold|i) 
  do-exp-fold : (e, (exps, stmts, i)) -> result
    where
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; result := ([exp_e | exps], [stmts_e | stmts], i')
  
  exp-to-js-stmts(|i) : RenderComponent(name, parameters, children) -> []
  
  exp-to-js-stmts(|i) : RenderLoop(x_var, e, body) -> result 
    with
      (exp_e, stmts_e, i') := <exp-to-js-stmts(|i)> e
    ; (exp_body, stmts_body, i'') := <exp-to-js-stmts(|i')> body
    ; (x_result, i''') := <int-to-varname-inc> i''
    with
      switch <get-multiplicity> e
        case upper-one:
          stmts_scoped := js-stmt* |[
            var oldScope = scope;
            var x_result;
            if(exp_e !== null){
              (function(){
                var scope = _.assign({}, oldScope, {
                  x_var : exp_e 
                });
                stmts_body
                x_result = exp_body;
              })();
            } else {
              x_result = null;
            }
          ]|
        ; i_result := i'''
        case upper-many:
          (x_loop, i'''') := <int-to-varname-inc> i'''
        ; stmts_scoped := js-stmt* |[
            var oldScope = scope;
            var x_result = [];
            for(var x_loop = 0 ; x_loop < exp_e.length ; x_loop++){
              (function(){
                var scope = _.assign({}, oldScope, {
                  x_var : exp_e[x_loop]
                });
                stmts_body
                x_result.push(exp_body);
              })();
            } 
          ]|
        ; i_result := i''''
      end
    with
      stmts := js-stmt* |[
        stmts_e
        stmts_scoped
      ]|
    ; result := (<js-var> x_result, stmts, i_result)
    
    
    
     
  